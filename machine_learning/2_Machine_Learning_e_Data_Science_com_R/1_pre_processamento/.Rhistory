return (20 - resultado)
else
return(resultado - 20)
}
f <-function(x){
#equação 2* x + 5 + 20
resultado = 2 * x + 5
if (resultado > 20)
return (20 - resultado)
else
return(resultado - 20)
}
resultado = ga("real-value", fitness = f, lower=c(-20), upper=c(20), popSize = 10, maxiter = 20, monitor = T, names=c("a"))
summary(resultado)$solution
plot(resultado)
plot(resultado)
mochila <- data.frame(item = c("canivete", "feijão", "batatas", "lanterna", "saco de dormir", "corda", "bussula"), pontos = c(10, 20, 15, 2, 30, 10, 30), peso = c(1, 5, 10, 1, 7, 5, 1))
{
pontos = 0
peso = 0
for (i in 1:7)
{
if (x[i] != 0)
{
pontos = pontos + mochila[i,2]
peso = peso + mochila[i,3]
}
}
if (peso > 15)
pontos = 0
return(pontos)
}
mochila <- data.frame(item = c("canivete", "feijão", "batatas", "lanterna", "saco de dormir", "corda", "bussula"), pontos = c(10, 20, 15, 2, 30, 10, 30), peso = c(1, 5, 10, 1, 7, 5, 1))
if (x[ i ] != 0)
}
peso = peso + mochila[i,3]
peso = peso + mochila[i,3]
{
pontos = pontos + mochila[i,2]
peso = peso + mochila[i,3]
}
{
if (x[ i ] != 0)
{
pontos = pontos + mochila[i,2]
peso = peso + mochila[i,3]
}
}
if (peso > 15)
mochila <- data.frame(item = c("canivete", "feijão", "batatas", "lanterna", "saco de dormir", "corda", "bussula"), pontos = c(10, 20, 15, 2, 30, 10, 30), peso = c(1, 5, 10, 1, 7, 5, 1))
f <-function(x)
{
pontos = 0
peso = 0
for (i in 1:7)
{
if (x[ i ] != 0)
{
pontos = pontos + mochila[i,2]
peso = peso + mochila[i,3]
}
}
if (peso > 15)
pontos = 0
return(pontos)
}
resultado = ga("binary", fitness = f, nBits = 7, popSize = 10, maxiter = 15, names= c("canivete", "feijão", "batatas", "lanterna", "saco de dormir", "corda", "bussula"))
summary(resultado)
summary(resultado)$soluction
plot(resultado)
plot(resultado)
library(GA)
f <-function(x){
#equação 2* x + 5 + 20
resultado = 2 * x + 5
if (resultado > 20)
return (20 - resultado)
else
return(resultado - 20)
}
resultado = ga("real-value", fitness = f, lower=c(-20), upper=c(20), popSize = 10, maxiter = 20, monitor = T, names=c("a"))
summary(resultado)$solution
plot(resultado)
library(GA)
mochila <- data.frame(item = c("canivete", "feijão", "batatas", "lanterna", "saco de dormir", "corda", "bussula"), pontos = c(10, 20, 15, 2, 30, 10, 30), peso = c(1, 5, 10, 1, 7, 5, 1))
f <-function(x)
{
pontos = 0
peso = 0
for (i in 1:7)
{
if (x[ i ] != 0)
{
pontos = pontos + mochila[i,2]
peso = peso + mochila[i,3]
}
}
if (peso > 15)
pontos = 0
return(pontos)
}
resultado = ga("binary", fitness = f, nBits = 7, popSize = 10, maxiter = 15, names= c("canivete", "feijão", "batatas", "lanterna", "saco de dormir", "corda", "bussula"))
summary(resultado)
summary(resultado)$soluction
plot(resultado)
mapa = read.csv(file.choose(), header = F, sep = ";")
library(GA)
mapa = read.csv(file.choose(), header = F, sep = ";")
f <- function(z)
{
dist = 0
for (i in 1:4)
{
cidade1 = z[i]
cidade2 = z[i + 1]
dist = dist + mapa[cidade1, cidade2]
}
return(-dist)
}
resultado <- ga(type = "permutation", fitness = f, min = c(1, 1, 1, 1, 1), max = c(5, 5, 5, 5, 5), popSize = 10, maxiter = 5, names = c("Linden", "Parika", "Lethem", "Rosigno1", "New Amsterdam"))
summary(resultado)
summary(resultado)$solution
plot(resultado)
if(!require(tidyverse)) install.packages("tidyverse")
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
tidyverse_update() # atualizando pacote
library(tidyverse)
if(!require(nycflights13)) install.packages("nycflights13")
library(nycflights13)
if(!require(gapminder)) install.packages("gapminder")
library(gapminder)
if(!require(Lahman)) install.packages("Lahman")
library(Lahman)
1 + 2
1 + 2
# Funções são seguidas de parênteses, como sum() ou mean();
# Objetos estão sem parênteses, como flights ou x;
# Se quisermos deixar claro de qual pacote um objeto vem, usaremos o nome
# do pacote seguido por um par de dois-pontos, como dplyr::mutate()
library(tidyverse)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_point(mapping = aes(x = tamanho do motor (displ), y = eficiência do combustível (hwy))
# Objetivo: primeiro contato com a linguagem R (segunda, terceira, quarta...)
# craindo variaveis
# para executar clique sobre a linha ou selecione o conjunto de linhas
# e precione ctrl + enter
a <- 10
a
b
b = 10
b
B
b
5+5
a <- 10 # em R, atribui-se variável com '<-' ou '='
a
b
b = 10
b
B
c -> 10
10 -> c
c -> d
# para padrozinar sempre utilizaremos 'varaiveis' <- 'valor'
a <- 10
b <- 5
a
b
c <- a + b
c
a <- 'Heitor'
b <- 'Joao'
a
b
c <- a + b
c
a <- 10
b <- 5
c <- a + b
a <- 'Heitor'
b <- 'Joao'
c <- a + b
c
c <- c(a, b)
c
c
# Help - chamar o help
?c # chamando o help da função c
c <- c('Renato', 'Cruz')
a <- c(10,5,15,20)
a
?summary
summary(a)
summary(b)
?str_c
if(!require(stringr)) install.packages("stringr")
library(stringr)
?str_c
Nome <- 'João'
Sobrenome <- 'Silva'
NomeCompleto <- str_c(Nome, Sobrenome)
NomeCompleto
NomeCompleto <- str_c(Nome, " ", Sobrenome)
NomeCompleto
# Objetivo: realizar operações matemáticas, logicas e de comparação
# Como?
# utilizando recursos básicos
# soma
5 + 5
# subtração
10 - 8
# divisão
9 / 3
# multiplicação
4 * 2
# potencia
4 ** 2
4 ^ 2
# igual?
5 == 6
5 == 5
# diferente?
5 != 6
5 != 5
# maior?
4 > 2
4 > 6
# menor?
4 < 2
4 < 6
# maior ou igual?
4 >= 2
4 >= 4
# menor ou igual?
4 <= 6
4 <= 4
# E
6 == 6
6 == 6 & 7 == 8
6 == 6 & 7 != 8
# Ou
6 == 6
6 == 6 | 7 == 8   #parecido com C# (||)
6 == 6 | 7 != 8
# negação
!6 == 6
!4 > 2
# exemplos
# Armazenamento numérico
salario <- 3450.89
horas <- '220'
sh <- salario/horas
shi <- as.integer(salario/horas)
shi = 5
shi = round(salario/horas)
salario <- 3450.89
horas <- 220
sh <- salario/horas
salario <- 3450.89
horas <- 220
sh <- salario/horas
shi <- as.integer(salario/horas)
shi = 5
shi = round(salario/horas)
shi <- as.integer(salario/horas) # converte para valor inteiro
shi = round(salario/horas)
shi <- as.integer(salario/horas) # converte para valor inteiro
shi = 5
shr = round(salario/horas)       # arredonda
numeros1 <- salario + horas
numeros1
numeros2 <- c(salario, horas)
numeros2
# OBJETIVO: entender como a linguagm R organiza os dados
# COMO?
# Exemplos
# Armazenamento carateres
nome_1 <- 'Renato Cruz'
nome_2 <- 'Maria Antonia'
idade <- '36'
idade + 5
nomes <- nome_1 + nome_2
nomes <- c(nome_1, nome_2)
nomes
nomes[1]
nomes[2]
# armazenamento de fatores
cargahoraria <- c(220,220,150,100,100)
salario <- 2600
hora <- 1000
l1 <- salario > hora
l1
logico <- TRUE
logico1 <- "TRUE"
logico2 <- c(1, TRUE, 3)
logico2
salario <- 8816.25
hora <- 20
l1 <- salario > hora
l1
logico <- TRUE
logico1 <- "TRUE"
logico2 <- c(1, TRUE, 3)
logico2
logico2 <- c(1, TRUE, FALSE, 3)
# Vetores de caracteres
is.vector(nomes)
mode(nomes)
nome = 'Renato'
horas = 10
l1 = TRUE
nome = 'Renato'
horas = 10
l1 = TRUE
is.vector(nomes)
mode(nomes)
nomes = 'Renato'
horas = 10
l1 = TRUE
nomes = 'Renato Cruz'
# Vetores de caracteres
is.vector(nomes)
mode(nomes)
# vetores numéricos
is.vector(horas)
mode(horas)
# vetor lógico
is.vector(l1)
mode(l1)
a <- c(1, 2, 3, 4, 5)
b <- c(1, "2", 3, 4, 5)
a
b
is.list(a)
is.list(b)
is.vector(a)
is.vector(b)
b <- list(10, '2', 8)
is.list(b)
mode(b)
str(b)
e <- list(c(10,6,51,5),'2',8)
str(e)
e[[1]][1]
str(b)
str(e)
e[[2]]
a <- c(1,2,3,4,5)
b <- c(1,'2',3,4,5)
a
b
m <- matrix(1:9, nrow = 3)
m
mode(m)
class(m)
is.matrix(m)
m
View(m)
m[1,3]
m[1,3] <- "a"
m
mode(m)
class(m)
state <- read.csv(file='C:/Users/Renato/Dropbox/pos_usp/usp_data_open/statistic/estatistica_pratica_para_ciencieas_de_dados/data/state.csv')
View(state)
mean(state[["Population"]])
media = mean(state[["Population"]])
media_pon = mean(state[["Population"]], trim=0.1)
mediana = median(state[["Population"]])
if(!require(matrixStats))install.packages("matrixStats")
library(matrixStats)
weighted.mean(state[["Murder.Rate"]], w=state[["Population"]])
mediana_pon = weighted.mean(state[["Murder.Rate"]], w=state[["Population"]])
View(state)
media_pon_2 = weighted.mean(state[["Murder.Rate"]], w=state[["Population"]])
mediana_pon = weightedMedian(state[["Murder.Rate"]], w=state[["Population"]])
state <- read.csv(file='C:/Users/Renato/Dropbox/pos_usp/usp_data_open/statistic/estatistica_pratica_para_ciencieas_de_dados/data/state.csv')
sd(state[['Population']])
desvio_padrao <- sd(state[['Population']])
mad <- mad(state[['Population']])
R.version
R.version.string
RStudio.Version()
ggplot(data = mpg)
library(tidyverse)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) # Uma mensagem de erro
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
library(tidyverse)
?mpg
ggplot(data = mpg) +
geom_point(mapping = aes(x = cyl, y = hwy))
ggplot(data = mpg) +
geom_point(mapping = aes(x = class, y = drv))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, alpha = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = 'blue'))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = "blue"))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), shape = 0)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), shape = 1)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), shape = 5)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), shape = 8)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
faceta_wrap(~class, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~class, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))
ggplot(data = mpg) +
geom_smooth(
mapping = aes(x = displ, y = hwy, linetype = drv),
show.legend = FALSE
)
ggplot(data = mpg) +
gem_point(mapping = aes(x = displ, y = hwy)) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_point() +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = disp, y = kwy)) +
geom_point() +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = kwy)) +
geom_point() +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(
data = filter(mpg, class == "subcompact"),
se = FALSE
)
base = read.csv("credit_data.csv")
base$clientid = NULL # apagar este atributo (não é importante para ML)
summary(base) # mesma função do .describe pandas/python
base = read.csv("credit_data.csv")
base = read.csv("credit_data.csv")
setwd("C:/Users/Renato/Dropbox/pos_usp/usp_data_open/machine_learning/2_Machine_Learning_e_Data_Science_com_R/1_pre_processamento")
base = read.csv("credit_data.csv")
View(base)
base$clientid = NULL
summary(base)
base[base$age < 0, ]
base[base$age < 0 & !is.na(base$age), ]
idade_invalida = base[base$age < 0 & !is.na(base$age), ]
View(idade_invalida)
mean[base$age]
mean(base$age)
mean(base$age, na.rm = TRUE)
mean(base$age[base$age>0], na.rm = TRUE)
base$age = ifelse(base$age<0, 40.92, base$age)
mean(base$age, na.rm = TRUE)
base[is.na(base$age), ]
base$age = ifese(is.na(base$age), mean(base$age, na.rm = TRUE), base$age)
base$age = ifelse(is.na(base$age), mean(base$age, na.rm = TRUE), base$age)
base[is.na(base$age), ]
base = scale(base)
base = read.csv("credit_data.csv")
base = read.csv("credit_data.csv")
View(base)
base$clientid = NULL
summary(base)
idade_invalida = base[base$age < 0 & !is.na(base$age), ]
mean(base$age, na.rm = TRUE)                  # media, tirando valores NA (isso inclui os dados incons. na média)
mean(base$age[base$age>0], na.rm = TRUE)       # média sem dados incons. e valores NA
base$age = ifelse(base$age<0, 40.92, base$age)
base[is.na(base$age), ]
base$age = ifelse(is.na(base$age), mean(base$age, na.rm = TRUE), base$age)
base[, 1:3] = scale(base[, 1:3])
